import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import xyz.wagyourtail.jvmdg.gradle.task.DowngradeJar
import xyz.wagyourtail.jvmdg.gradle.task.ShadeJar

plugins {
    id("java")
    id("xyz.wagyourtail.jvmdowngrader") version("1.1.3")
    alias(libs.plugins.shadow)
    alias(libs.plugins.unimined) apply(false)
    alias(libs.plugins.spotless) apply(false)
}

// --------------------------- Merge mixin configs --------------------------------
ext.mergeMixinConfigs = { List<File> mixinConfigs ->
    File merged = file('./build/tmp/pcf.mixins.json')
    def mixinConfigJson = [:]
    mixinConfigJson.put("compatibilityLevel", "JAVA_8")
    mixinConfigJson.put("minVersion", "0.8")
    def injectors = [:]
    injectors.put("defaultRequire", 1)
    mixinConfigJson.put("injectors", injectors)
    mixinConfigJson.put("required", true)
    mixinConfigJson.put("plugin", "org.adde0109.pcf.mixin.plugin.PCFMixinPlugin")
    mixinConfigJson.put("package", "org.adde0109.pcf.mixin")
    mixinConfigJson.put("mixins", [])
    mixinConfigJson.put("client", [])
    mixinConfigJson.put("server", [])

    JsonSlurper json = new JsonSlurper()
    def mixins = []
    def client = []
    def server = []
    mixinConfigs.each { mixinConfig ->
        def mixinConfigJsonFile = json.parse(mixinConfig)
        if (mixinConfigJsonFile.get("mixins") != null) {
            mixins += mixinConfigJsonFile.get("mixins")
        }
        if (mixinConfigJsonFile.get("client") != null) {
            client += mixinConfigJsonFile.get("client")
        }
        if (mixinConfigJsonFile.get("server") != null) {
            server += mixinConfigJsonFile.get("server")
        }
    }
    mixins.sort { a, b -> a.compareTo(b) }
    client.sort { a, b -> a.compareTo(b) }
    server.sort { a, b -> a.compareTo(b) }
    mixinConfigJson.put("mixins", mixins)
    mixinConfigJson.put("client", client)
    mixinConfigJson.put("server", server)
    merged.text = JsonOutput.prettyPrint(JsonOutput.toJson(mixinConfigJson))
    return fileTree(merged)
}

// --------------------------- Jar file helper method --------------------------------
ext.bundleJars = { Map<String, List<String>> platformVersions ->
    def jarFiles = [
            file("./common/build/libs/${project_id}-common-${version}-shaded.jar")
    ]
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            jarFiles.add(file("${platform}/${platform}-${mcVersion}/build/libs/${project_id}-${platform}-${mcVersion}-${version}.jar") as File)
        }
    }
    def zipped = jarFiles.collect {
        zipTree(it).matching {
            exclude('pcf.mixins.*')
        }
    }
    def mixinConfigs = []
    jarFiles.collect {
        zipTree(it).files.each { file ->
            if (file.name.startsWith("pcf.mixins.")) {
                mixinConfigs.add(file)
            }
        }
    }
    zipped.add(mergeMixinConfigs(mixinConfigs))
    return zipped
}

subprojects {
    apply(plugin: 'java')
    apply(plugin: libs.plugins.unimined.get().pluginId)
    apply(plugin: libs.plugins.spotless.get().pluginId)

    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    sourceCompatibility = 21
    targetCompatibility = 21

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        // NeuralNexus
        maven {
            name = "NeuralNexus"
            url = "https://maven.neuralnexus.dev/releases"
        }

        // NeuralNexus Mirror
        maven {
            name = 'NeuralNexus Mirror'
            url = 'https://maven.neuralnexus.dev/mirror'
        }

        // Minecraft
        maven {
            name = "minecraft-repo"
            url = "https://libraries.minecraft.net/"
        }
    }

    dependencies {
        compileOnly("org.jetbrains:annotations:24.1.0")
        compileOnly("org.spongepowered:mixin:0.8.5")
        compileOnly("dev.neuralnexus:conditional-mixins:0.1.1")
    }

    spotless {
        format 'misc', {
            target '*.gradle', '.gitattributes', '.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            toggleOffOn()
            importOrder()
            removeUnusedImports()
            cleanthat()
            googleJavaFormat('1.17.0').aosp().formatJavadoc(true).reorderImports(true)
            formatAnnotations()
        }
    }

    tasks.assemble.dependsOn(spotlessApply)
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
sourceCompatibility = targetCompatibility = 21

repositories {
    mavenLocal()
    mavenCentral()

    // NeuralNexus
    maven {
        name = "NeuralNexus"
        url = "https://maven.neuralnexus.dev/releases"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

var platformVersions = [:]
platformVersions.put("forge", Arrays.asList("1.14.4", "1.16.5", "1.17.1", "1.18",
        "1.19", "1.19.1", "1.19.3", "1.20.2", "1.20.6", "1.21"))
platformVersions.put("neoforge", Arrays.asList("1.20.2", "1.21"))

tasks.register("shadeAndRelocate", ShadowJar) {
    dependsOn(":common:shadowJar")
    platformVersions.each { platform, versions ->
        versions.each { mcVersion ->
            dependsOn(":${platform}:${platform}-${mcVersion}:build")
        }
    }

    relocate("dev.neuralnexus.conditionalmixins", "org.adde0109.pcf.lib.conditionalmixins")
    relocate("dev.neuralnexus.taterapi", "org.adde0109.pcf.lib.taterapi")

    String mc_version = '1.14-1.21.1'
    archiveFileName = "proxy-compatible-forge-${version}-mono.jar"
    destinationDirectory = file("./build/libs")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes([
                "Specification-Title": "${project_name} ${mc_version}",
                "Specification-Version": "1",
                "Specification-Vendor": "adde0109",
                "Implementation-Version": version,
                "Implementation-Vendor": "adde0109",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "pcf.mixins.json"
        ])
    }

    from(["README.md", "LICENSE"]) {
        into("META-INF")
    }
    from {
        bundleJars(platformVersions)
    }
}

tasks.register("customDowngrade", DowngradeJar) {
    inputFile = tasks.shadeAndRelocate.archiveFile
    downgradeTo = JavaVersion.VERSION_1_8
    classpath = sourceSets.main.compileClasspath
    archiveClassifier = "downgraded-8"
}

tasks.register("customShadeDowngradedApi", ShadeJar) {
    inputFile = tasks.customDowngrade.archiveFile
    archiveFileName = "pcf-${version}.jar"
}

tasks.customDowngrade.dependsOn(shadeAndRelocate)
tasks.customShadeDowngradedApi.dependsOn(customDowngrade)
tasks.assemble.dependsOn(customShadeDowngradedApi)
